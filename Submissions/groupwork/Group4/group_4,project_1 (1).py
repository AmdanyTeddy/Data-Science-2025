# -*- coding: utf-8 -*-
"""Group 4,project 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xDQ2yHkL4OozsPLIXaulgN1rFyYx0ygB
"""

#Student Management System with CLI Interface
#SmartStudent â€“ A Command-Line Student Management System

import uuid
import json

class Student:
    def __init__(self, student_id, name, age, student_class, subjects_grades):
        self.id = student_id
        self.name = name
        self.age = age
        self.student_class = student_class
        self.subjects_grades = subjects_grades  # dict: {'Math': 85, 'English': 90}

    def average_grade(self):
        if not self.subjects_grades:
            return 0.0
        return sum(self.subjects_grades.values()) / len(self.subjects_grades)

    def __str__(self):
        return f"{self.id}: {self.name}, Age: {self.age}, Class: {self.student_class}, Avg: {self.average_grade():.2f}"

    def to_dict(self):
        return {
            "student_id": self.id,
            "name": self.name,
            "age": self.age,
            "student_class": self.student_class,
            "subjects_grades": self.subjects_grades
        }

class StudentManager:
    def __init__(self):
        self.students = []

    def add_student(self, name, age, student_class, subjects_grades):
        student_id = str(uuid.uuid4())[:8]
        student = Student(student_id, name, age, student_class, subjects_grades)
        self.students.append(student)

    def view_all(self):
        return self.students

    def search(self, query):
        return [s for s in self.students if query.lower() in s.name.lower() or s.id == query]

    def delete(self, student_id):
        self.students = [s for s in self.students if s.id != student_id]

    def edit(self, student_id, **kwargs):
        for s in self.students:
            if s.id == student_id:
                s.name = kwargs.get('name', s.name)
                s.age = kwargs.get('age', s.age)
                s.student_class = kwargs.get('student_class', s.student_class)
                s.subjects_grades = kwargs.get('subjects_grades', s.subjects_grades)

    def sort_by_name(self):
        return sorted(self.students, key=lambda s: s.name)

    def sort_by_grade(self):
        return sorted(self.students, key=lambda s: s.average_grade(), reverse=True)

def save_to_file(filename, students):
    data = [s.to_dict() for s in students]
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

def load_from_file(filename):
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        return [Student(**item) for item in data]
    except FileNotFoundError:
        return []

def input_subjects():
    subjects = {}
    while True:
        subject = input("Enter subject name (or 'done'): ")
        if subject.lower() == 'done':
            break
        try:
            grade = float(input(f"Enter grade for {subject}: "))
            subjects[subject] = grade
        except ValueError:
            print("Invalid grade. Please enter a number.")
    return subjects

def main():
    manager = StudentManager()
    manager.students = load_from_file("students.json")

    while True:
        print("\n=== SmartStudent Menu ===")
        print("1. Add Student\n2. View All\n3. Search\n4. Edit\n5. Delete\n6. Average Grade\n7. Sort by Name\n8. Sort by Grade\n9. Save & Exit")
        choice = input("Choose an option: ")

        if choice == '1':
            name = input("Name: ")
            try:
                age = int(input("Age: "))
            except ValueError:
                print("Invalid age.")
                continue
            student_class = input("Class: ")
            grades = input_subjects()
            manager.add_student(name, age, student_class, grades)
        elif choice == '2':
            for s in manager.view_all():
                print(s)
        elif choice == '3':
            query = input("Enter name or ID: ")
            results = manager.search(query)
            if results:
                for s in results:
                    print(s)
            else:
                print("No student found.")
        elif choice == '4':
            sid = input("Student ID to edit: ")
            print("Leave field empty to keep unchanged.")
            name = input("New name: ")
            age_input = input("New age: ")
            student_class = input("New class: ")
            update_grades = input("Update subjects/grades? (y/n): ").lower() == 'y'
            grades = input_subjects() if update_grades else None
            try:
                age = int(age_input) if age_input else None
            except ValueError:
                print("Invalid age. Edit cancelled.")
                continue
            manager.edit(sid, name=name or None, age=age,
                         student_class=student_class or None, subjects_grades=grades)
        elif choice == '5':
            sid = input("Student ID to delete: ")
            manager.delete(sid)
            print("Student deleted if ID was valid.")
        elif choice == '6':
            sid = input("Enter Student ID: ")
            results = manager.search(sid)
            if results:
                print(f"Average grade: {results[0].average_grade():.2f}")
            else:
                print("Student not found.")
        elif choice == '7':
            for s in manager.sort_by_name():
                print(s)
        elif choice == '8':
            for s in manager.sort_by_grade():
                print(s)
        elif choice == '9':
            save_to_file("students.json", manager.view_all())
            print("Data saved. Exiting.")
            break
        else:
            print("Invalid option.")

def test_average():
    s = Student("123", "Test", 20, "10A", {"Math": 80, "English": 90})
    assert s.average_grade() == 85.0

def test_empty_grades():
    s = Student("001", "NoGrade", 18, "11B", {})
    assert s.average_grade() == 0.0

def test_str():
    s = Student("002", "Alice", 18, "12B", {"Math": 90})
    assert "Alice" in str(s)
    assert "90" in str(s)

def run_tests():
    test_average()
    test_empty_grades()
    test_str()
    print("All tests passed.")

# Run tests + start app
if __name__ == "__main__":
    run_tests()
    main()