{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPNyCb9dbracmoV+N+C5MAN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["- Understanding OOP with a Library System\n","\n","- Objective: Practice __init__, self, custom methods, and comparison between objects (Lecture 17 focus)\n","\n","- Task: Build a class-based Library Book Tracker Write a class called Book that: • Has attributes: title, author, year, copies_available\n","\n","- Has methods: • borrow() → Decrease copies_available by 1 if at least one copy is available, else print “Not available\"\n","\n","- • return_book() → Increase copies_available by 1\n","\n","- • is_same_book(other) → Returns True if title and author match another book object"],"metadata":{"id":"JCPHMWb5qwOx"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"cQM3hQw6ql0R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1752846564061,"user_tz":-180,"elapsed":28,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"c439c1d5-6b94-4753-fdbe-8015dfc6c920"},"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","1\n","2\n","True\n"]}],"source":["class Book:\n","  def __init__(self, title, author, year, copies_available):\n","    self.title = title\n","    self.author = author\n","    self.year = year\n","    self.copies_available = copies_available\n","\n","  def borrow(self):\n","    if self.copies_available > 0:\n","      self.copies_available -= 1\n","\n","    else:\n","      print(\"Not Available!\")\n","\n","  def return_book(self):\n","    self.copies_available += 1\n","\n","  def is_same_book(self, other):\n","    return self.title == other.title and self.author == other.author\n","\n","# call the functions\n","book1 = Book(\"5AM CLUB\", \"Robin Sharma\", 2021, 3)\n","book2 = Book(\"5AM CLUB\", \"Robin Sharma\", 2021, 2)\n","\n","book1.borrow() # reduced to 2\n","print(book1.copies_available)\n","\n","book1.borrow() # reduced to 1\n","print(book1.copies_available)\n","\n","book1.return_book() # increased to 2\n","print(book1.copies_available)\n","\n","print(book1.is_same_book(book2)) # True\n","\n","\n","\n"]},{"cell_type":"markdown","source":["- Customizing Behavior with Dunder\n","\n","- Apply add, str, and class composition\n","\n","- Methods – Fraction Calculator\n","\n","-  Task: Create a class Fraction with dunder methods Write a class Fraction that:  \n","\n","                • Stores a numerator and denominator (num, denom)\n","\n","                • Has a method simplify() → Reduces the fraction (optional for bonus)\n","                \n","                • Overrides:\n","                \n","                • add → Add two fractions using formula\n","                \n","                • str → Pretty print (e.g., \"1/2\")\n","                \n","                • eq → Return True if fractions are equal (e.g., 1/2 == 2/4)"],"metadata":{"id":"zFWcwb3ovYfI"}},{"cell_type":"code","source":["class Fraction:\n","  # stores a numerator and denominator\n","  def __init__(self, num, denom):\n","    self.num = num\n","    self.denom = denom\n","\n","  # Has a method simplify()\n","  def simplify(self):\n","    gcd = self._find_gcd(self.num, self.denom)\n","    self.num //= gcd\n","    self.denom //= gcd\n","    return self\n","\n","  # Overrides\n","  def _find_gcd(self, a, b):\n","    while b != 0:\n","      a, b = b, a % b\n","    return a\n","\n","  # add\n","  def __add__(self, other):\n","    new_num = self.num * other.denom + other.num * self.denom\n","    new_denom = self.denom * other.denom\n","    return Fraction(new_num, new_denom).simplify()\n","\n","  # eq\n","  def __eq__(self, other):\n","    a = Fraction(self.num, self.denom).simplify()\n","    b = Fraction(other.num, other.denom).simplify()\n","    return a.num == b.num and a.denom == b.denom\n","\n","  # str\n","  def __str__(self):\n","    return f\"{self.num} / {self.denom}\"\n","\n","# call your function\n","f1 = Fraction(1, 2)\n","f2 = Fraction(1, 4)\n","f3 = f1 + f2\n","\n","print(f3)\n","print(f1 == f2) # False\n","print(f1 == Fraction(2, 4)) # True\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cMDxMW_hvMqm","executionInfo":{"status":"ok","timestamp":1752846585805,"user_tz":-180,"elapsed":41,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"d6bc6e88-eeb4-404a-8d0f-d309480d2365"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["3 / 4\n","False\n","True\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ekTKbnEpzBj_"},"execution_count":null,"outputs":[]}]}