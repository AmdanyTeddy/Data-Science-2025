{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN4qQqXoK6r5oPQE8TGiDto"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Count_occurences_nested"],"metadata":{"id":"q-WFIm4v8e1O"}},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gj9oOj1_8V_D","executionInfo":{"status":"ok","timestamp":1752581660530,"user_tz":-180,"elapsed":22,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"53b6cea1-3577-420f-e57d-3cdc8617636a"},"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","1\n","0\n"]}],"source":["# Recursion on non-numerics(nested lists)\n","\n","def count_occurences_nested(L, target):\n","  \"\"\"\n","  L: a list that may contain other lists (nested)\n","  target: any value\n","  \"\"\"\n","  count = 0\n","  for item in L:\n","    if isinstance(item, list):\n","      count += count_occurences_nested(item, target)\n","\n","    elif item == target:\n","      count += 1\n","\n","  return count\n","\n","print(count_occurences_nested([1, [2, [1, 3], 4], 1], 1))  # output 3\n","print(count_occurences_nested([[1,2],[3,[4,1]]], 4)) # output 1\n","print(count_occurences_nested([[],[],[]], 5)) # output 0"]},{"cell_type":"markdown","source":["Hanoi moves\n"],"metadata":{"id":"hXbZ8bguAidY"}},{"cell_type":"code","source":["# Recursion, Towers of Hanoi\n","\n","def hanoi_moves(n, source, target, spare):\n","  \"\"\"\n","  n: int > 1\n","  source, target, spare: string names of rods(such as \"A\", \"B\", \"C\")\n","  \"\"\"\n","  moves = []\n","\n","  if n == 1:\n","    moves.append([source, target])\n","\n","  else:\n","    # move the disks in 3 steps\n","    moves += hanoi_moves(n-1, source, spare, target)\n","    moves.append(f\"Move from {source} to {target}\")\n","    moves += hanoi_moves(n-1, spare, target, source)\n","\n","  return moves\n","\n","print (hanoi_moves(2, \"A\", \"C\", \"B\")) # moves from A to B, A to C, then B to C\n","print(hanoi_moves(3, \"A\", \"C\", \"B\"))\n","# moves from A to C, A to B, then C to B\n","# moves from A to C\n","# moves from B to A, B to C, then A to C\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rGNP4Aqk-1eQ","executionInfo":{"status":"ok","timestamp":1752582752460,"user_tz":-180,"elapsed":35,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"d645dcad-e422-4553-bc78-4e3eac38dc41"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[['A', 'B'], 'Move from A to C', ['B', 'C']]\n","[['A', 'C'], 'Move from A to B', ['C', 'B'], 'Move from A to C', ['B', 'A'], 'Move from B to C', ['A', 'C']]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dV4SraiuEbKe"},"execution_count":null,"outputs":[]}]}