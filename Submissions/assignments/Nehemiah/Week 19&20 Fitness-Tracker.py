{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMIOj8dYuwiqll81R3KeSk7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[" - Challenge 1: Build a HealthProfile Class"],"metadata":{"id":"Uj_WfPCs01Ll"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nv0BGhb-1EYJ","executionInfo":{"status":"ok","timestamp":1753639598077,"user_tz":-180,"elapsed":65,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"67d362f5-8adb-4e54-a540-bedea55e4993"},"outputs":[{"output_type":"stream","name":"stdout","text":["Name: Alice\n","Age (years): 25\n","Weight (kg): 76\n","Height (cm): 165\n","Gender: female\n","Activity Level: moderate\n","Name: Ken\n","Age (years): 36\n","Weight (kg): 81\n","Height (cm): 180\n","Gender: male\n","Activity Level: very active\n"]}],"source":["class HealthProfile:\n","  # Attributes\n","  def __init__(self, name, age, weight_kg, height_cm, gender, activity_level):\n","    self.name = name\n","    self.age = age\n","    self.weight_kg = weight_kg\n","    self.height_cm = height_cm\n","    self.gender = gender\n","    self.activity_level = activity_level\n","\n","  # Method 1 - returns Body Mass Index\n","  def calculate_bmi(self):\n","    height_m = self.height_cm / 100\n","    bmi = self.weight_kg / (height_m ** 2)\n","    return bmi\n","\n","  # Method 2 - returns Basal Metabolic Rate using Mifflin-St Jeor Equation\n","  def calculate_bmr(self):\n","    if self.gender == \"male\":\n","      bmr = 88.362 + (13.397 * self.weight_kg) + (4.799 * self.height_cm) - (5.677 * self.age)\n","    elif self.gender == \"female\":\n","      bmr = 447.593 + (9.247 * self.weight_kg) + (3.098 * self.height_cm) - (4.330 * self.age)\n","    else:\n","      raise ValueError(\"Invalid gender. Must be male or female\")\n","    return bmr\n","\n","  def __str__(self):\n","    return f\"Name: {self.name}\\nAge (years): {self.age}\\nWeight (kg): {self.weight_kg}\\nHeight (cm): {self.height_cm}\\nGender: {self.gender}\\nActivity Level: {self.activity_level}\"\n","\n","user1 = HealthProfile(\"Alice\", 25, 76, 165, \"female\", \"moderate\")\n","user2 = HealthProfile(\"Ken\", 36, 81, 180, \"male\", \"very active\")\n","print(user1)\n","print(user2)"]},{"cell_type":"markdown","source":["We used SRP to make sure our HealthProfile class stuck to its assigned task — managing health data only. The instructions were clear: no workouts, no calorie counting, and definitely no motivational whispering like “you got this, champ!” That kind of behavior belongs in a class built for workouts, not one that just logs height and weight. SRP kept us focused and disciplined, like a strict gym coach who only allows one exercise per set. If we need to track calories or design training programs, we’ll call in another class — one that isn’t afraid to sweat. In short, SRP kept things clean, simple, and easy to maintain. It also prevented our humble HealthProfile from morphing into a chaotic, multitasking health-and-fitness Swiss Army knife — because nobody wants spaghetti code in gym shorts."],"metadata":{"id":"3Z-QQEeeEs46"}},{"cell_type":"markdown","source":["- Challenge 2 :  Extendable CalorieCalculator"],"metadata":{"id":"PGLp8haO1AsK"}},{"cell_type":"code","source":["# Extendable CalorieCalculator\n","class CalorieCalculator:\n","  def calculate(self, minutes):\n","    raise NotImplementedError\n","\n","# initialise subclasses\n","class Walking(CalorieCalculator):\n","  def calculate(self, minutes):\n","    return 3.5 * minutes\n","\n","class Running(CalorieCalculator):\n","  def calculate(self, minutes):\n","    return 8.0 * minutes\n","\n","class Swimming(CalorieCalculator):\n","  def calculate(self, minutes):\n","    return 13.0 * minutes\n","\n","# use ActivityPlanner with loop and file I/O\n","class ActivityPlanner:\n","  def __init__(self):\n","    self.activities = {\n","        \"walking\" : Walking(),\n","        \"running\" : Running(),\n","        \"swimming\" : Swimming()\n","    }\n","    self.total_calories = 0\n","    self.log_file = \"activity_log.txt\"\n","\n","  def get_activity(self, name):\n","    return self.activities.get(name.lower())\n","\n","  def plan(self):\n","    print(\"\\nWelcome to Calorie Calculator!\")\n","    print(\"\\nAvailable activities: walking, running, swimming\")\n","    print(\"Type 'exit' to quit\\n\")\n","\n","    while True:\n","      activity_name = input(\"Enter an activity: \").strip().lower() # removes whitespaces and returns in lowercase\n","      if activity_name == \"quit\":\n","        break\n","\n","      activity = self.get_activity(activity_name)\n","      if not activity:\n","        print(f\"Activity \\\"{activity_name}\\\" not supported.\\n\") # Corrected quotes in f-string\n","        continue\n","\n","      try:\n","        minutes = int(input(\"Enter the number of minutes spent: \"))\n","        calories = activity.calculate(minutes)\n","        self.total_calories += calories\n","\n","        # result\n","        print(f\"> {activity_name.capitalize()} for {minutes} min = {calories:.2f} calories\\n\")\n","        # log activity\n","        self.log_activity(activity_name, minutes, calories)\n","      except ValueError:\n","        print(\"Please enter valid details.\\n\")\n","\n","    print(f\"\\nTotal Calories Burned: {self.total_calories:.2f}\") # returns result to 2 decimal places\n","    print(f\"Activities logged in '{self.log_file}'\")\n","\n","  def log_activity(self, name, minutes, calories):\n","    with open(self.log_file, \"a\") as file: # Corrected variable name\n","      file.write(f\"{name.capitalize()} - {minutes} minutes - {calories:.2f} calories\\n\")\n","\n","if __name__ == \"__main__\":\n","  planner = ActivityPlanner()\n","  planner.plan()"],"metadata":{"id":"xIkg2__wBonB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753702483255,"user_tz":-180,"elapsed":42538,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"b48d81f3-972a-4662-80fd-18259d988d16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Welcome to Calorie Calculator!\n","\n","Available activities: walking, running, swimming\n","Type 'exit' to quit\n","\n","Enter an activity: swimming\n","Enter the number of minutes spent: 10\n","> Swimming for 10 min = 130.00 calories\n","\n","Enter an activity: running\n","Enter the number of minutes spent: 23\n","> Running for 23 min = 184.00 calories\n","\n","Enter an activity: exit\n","Activity \"exit\" not supported.\n","\n","Enter an activity: quit\n","\n","Total Calories Burned: 314.00\n","Activities logged in 'activity_log.txt'\n"]}]},{"cell_type":"markdown","source":["We start with a base class CalorieCalculator that sets the rules: “All subclasses must calculate calories, or else!” Then we introduce specialists: Walking, Running, and Swimming, each with its unique calorie math. Think of them as personal trainers—each obsessed with their own activity.The activity_registry acts like a receptionist, mapping user input (e.g., “walking”) to the right trainer. Input is taken via a loop that politely asks what you did and for how long—unless you rudely type gibberish, in which case it scolds you and asks again.\n","\n","Every activity gets logged in a file like a gym diary, using log_activity. At the end, it tallies your effort like a supportive friend: “Nice job, 314 calories burned!”\n","\n","No sweat? Just add more activities to the registry. It's that easy."],"metadata":{"id":"8DfYSnIh0kMn"}},{"cell_type":"markdown","source":["- Challenge 3 : Workout Devices Simulation"],"metadata":{"id":"yxA1TRTY1LWO"}},{"cell_type":"code","source":["from abc import ABC, abstractmethod\n","# base abstract class\n","class WorkoutDevice(ABC):\n","  # we use the @abstractmethod to enforce consistency across all subclasses\n","  @abstractmethod\n","  def start_tracking(self):\n","    pass\n","\n","  @abstractmethod\n","  def stop_tracking(self):\n","    pass\n","\n","  @abstractmethod\n","  def get_data(self):\n","    pass\n","\n","# implement smartwatch\n","class Lenovo_SmartWatch(WorkoutDevice):\n","  def __init__(self):\n","    self.tracking = False\n","\n","  def start_tracking(self):\n","    self.tracking = True\n","    print(\"SmartWatch tracking started!\")\n","\n","  def stop_tracking(self):\n","    self.tracking = True\n","    print(\"SmartWatch tracking stopped!\")\n","\n","  def get_data(self):\n","    return {\n","        \"time\" : \"45 mins\",\n","        \"steps\" : 4500,\n","        \"distance\" : \"3.1 km\",\n","        \"heart_rate\" : \"102\"\n","    }\n","\n","# implement SmartShoe without heart rate\n","class Timber_smartShoe(WorkoutDevice):\n","  def __init__(self):\n","    self.tracking = False\n","\n","  def start_tracking(self):\n","    self.tracking = True\n","    print(\"HeartRateBand tracking started.\")\n","\n","  def stop_tracking(self):\n","    self.tracking = False\n","    print(\"HeartRateBand tracking stopped.\")\n","\n","  def get_data(self):\n","    return {\n","        \"time\" : \"21 mins\",\n","        \"steps\" : 1400,\n","        \"distance\" : \"2.1 km\",\n","        \"heart_rate\" : \"Not supported\"\n","    }\n","\n","# heartrateband that only focuses on the heart\n","class HeartRateBand(WorkoutDevice):\n","  def __init__(self):\n","    self.tracking = False\n","\n","  def start_tracking(self):\n","    self.tracking = True\n","    print(\"HeartRateBand tracking started!\")\n","\n","  def stop_tracking(self):\n","    self.tracking = True\n","    print(\"HeartRateBand tracking stopped!\")\n","\n","  def get_data(self):\n","    return {\n","        \"time\" : \"25 mins\",\n","        \"steps\" : 0,\n","        \"distance\" : \"0 km\",\n","        \"heart_rate\" : \"78\"\n","    }\n","\n","# test devices\n","def test_devices():\n","  devices = [Lenovo_SmartWatch(), Timber_smartShoe(), HeartRateBand()]\n","  for device in devices:\n","    device.start_tracking()\n","    data = device.get_data()\n","    print(f\"Device: {type(device).__name__}\")\n","    print(f\"Time: {data['time']}\")\n","    print(f\"Steps: {data['steps']}\")\n","    print(f\"Distance: {data['distance']}\")\n","    print(f\"Heart Rate: {data['heart_rate']}\\n\")\n","    device.stop_tracking()\n","\n","test_devices()"],"metadata":{"id":"43yDekgywHr4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753715269371,"user_tz":-180,"elapsed":56,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"10355f75-33a3-4679-95d4-e7b533808454"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SmartWatch tracking started!\n","Device: Lenovo_SmartWatch\n","Time: 45 mins\n","Steps: 4500\n","Distance: 3.1 km\n","Heart Rate: 102\n","\n","SmartWatch tracking stopped!\n","HeartRateBand tracking started.\n","Device: Timber_smartShoe\n","Time: 21 mins\n","Steps: 1400\n","Distance: 2.1 km\n","Heart Rate: Not supported\n","\n","HeartRateBand tracking stopped.\n","HeartRateBand tracking started!\n","Device: HeartRateBand\n","Time: 25 mins\n","Steps: 0\n","Distance: 0 km\n","Heart Rate: 78\n","\n","HeartRateBand tracking stopped!\n"]}]},{"cell_type":"markdown","source":["This code builds a smart fitness ecosystem, like having your own digital personal trainer squad. The WorkoutDevice abstract class sets the rules—every fitness gadget must be able to start, stop, and report data. Think of it like a job contract: “If you’re joining this gym, you must track workouts!”\n","\n","- Real Device #1: Lenovo_SmartWatch\n","This smartwatch is the overachiever at the gym. It tracks everything—time, steps, distance, and even heart rate. It's your full-body coach, like an Apple Watch or Fitbit.\n","\n","- Real Device #2: Timber_smartShoe\n","This one’s like those smart sneakers from Nike or Xiaomi—great at tracking steps and distance, but don’t ask it for your pulse. It politely says, “Heart rate? Not my department.”\n","\n","- Real Device #3: HeartRateBand\n","This is your typical gym strap monitor—like a Polar H10. It doesn’t care if you walked to the fridge or ran a marathon, it’s here just for your heart.\n","\n"," - The test_devices() Show\n","When run, each device joins the workout session, starts tracking, and spits out its data. Despite their differences, they all obey the same rules thanks to polymorphism. It’s like having a smartwatch, a shoe, and a chest strap all plugged into the same app—each doing their part, no arguments.\n","\n","This code is gym-ready, extensible, and respects all the solid principles. Add a smart water bottle or yoga mat tomorrow? No problem—they’ll just join the squad."],"metadata":{"id":"lcqRaQzSl8rU"}},{"cell_type":"markdown","source":["- Challenge 4 - : Extend Fitness Tracker – Add a BikeWorkout + Planner CLI"],"metadata":{"id":"8AbcFAJ1oQIR"}},{"cell_type":"code","source":["class Workout:\n","  def __init__(self, kind, duration_minutes):\n","    self.kind = kind\n","    self.duration = duration_minutes\n","\n","  def get_duration(self):\n","    return self.duration\n","\n","  def get_calories(self):\n","    raise NotImplementedError(\"Should be implemented in subclasses\")\n","\n","  def __eq__(self, other):\n","    return isinstance(other, Workout) and self.kind == other.kind and self.duration == other.duration\n","\n","# subclass for running, walking and biking\n","class RunWorkout(Workout):\n","  def get_calories(self):\n","    return self.duration * 10 # 10 calories per minute\n","\n","class WalkWorkout(Workout):\n","  def get_calories(self):\n","    return self.duration * 4 # 4 calories per minute\n","\n","class BikeWorkout(Workout):\n","  def get_calories(self):\n","    return self.duration * 5 # 5 calories per minute\n","\n","# create a function to create a workout\n","def create_workout():\n","  print(\"\\nWhat kind of workout did you do?\")\n","  print(\"1. Running\")\n","  print(\"2. Walking\")\n","  print(\"3. Biking\")\n","\n","  choice = input(\"Enter your choice (1/2/3): \")\n","\n","  try:\n","        duration = float(input(\"How many minutes did you do this activity? \"))\n","        if duration <= 0:\n","            print(\"Please enter a duration greater than zero.\")\n","            return None\n","  except ValueError:\n","        print(\"Oops! That wasn't a valid number.\")\n","        return None\n","\n","  if choice == \"1\":\n","    return RunWorkout(\"Running\", 30)\n","  elif choice == \"2\":\n","    return WalkWorkout(\"Walking\", 45)\n","  elif choice == \"3\":\n","    return BikeWorkout(\"Biking\", 60)\n","  else:\n","    print(\"Invalid choice. Please enter 1, 2, or 3.\")\n","    return None\n","\n","# the main program loop\n","def main():\n","  print(\"Welcome to the Fitness Tracker!\")\n","  workouts = []\n","\n","  while True:\n","    workout = create_workout()\n","    if workout:\n","      workouts.append(workout)\n","      print(f\"Workout added: {workout.kind} for {workout.get_duration()} minutes\")\n","\n","    again = input(\"Do you want to add another workout? (y/n): \").strip().lower()\n","    if again.lower() != \"y\":\n","      break\n","\n","  if workouts:\n","    print(\"\\nSummary of Workouts:\")\n","    for workout in workouts:\n","      print(f\"{workout.kind} for {workout.get_duration()} minutes - {workout.get_calories()} calories\")\n","\n","if __name__ == \"__main__\":\n","  main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e0bIqUIikzPy","executionInfo":{"status":"ok","timestamp":1753720631431,"user_tz":-180,"elapsed":26517,"user":{"displayName":"Nehemiah Kipchumba","userId":"09735398617109063840"}},"outputId":"aa356085-c267-4e35-8624-4662d2dc54c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome to the Fitness Tracker!\n","\n","What kind of workout did you do?\n","1. Running\n","2. Walking\n","3. Biking\n","Enter your choice (1/2/3): 2\n","How many minutes did you do this activity? 45\n","Workout added: Walking for 45 minutes\n","Do you want to add another workout? (y/n): y\n","\n","What kind of workout did you do?\n","1. Running\n","2. Walking\n","3. Biking\n","Enter your choice (1/2/3): 3\n","How many minutes did you do this activity? 35\n","Workout added: Biking for 60 minutes\n","Do you want to add another workout? (y/n): n\n","\n","Summary of Workouts:\n","Walking for 45 minutes - 180 calories\n","Biking for 60 minutes - 300 calories\n"]}]},{"cell_type":"markdown","source":[" - This program tracks different workouts—running, walking, and biking—by using a base Workout class and subclasses that calculate calories burned based on duration. Users choose an activity, input how long they exercised, and the program calculates calories. It loops to allow multiple entries and then displays a summary. It uses inheritance, input validation, and basic object-oriented principles."],"metadata":{"id":"skEO3DpV57x_"}},{"cell_type":"code","source":[],"metadata":{"id":"iTzdYxuU4LAp"},"execution_count":null,"outputs":[]}]}