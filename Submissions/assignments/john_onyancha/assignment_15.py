# -*- coding: utf-8 -*-
"""assignment_15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbtfOcI_Zh3VhcFmRMXtVxjQ_byv8x8B
"""

# Challenge 1: factorial using recursion
def factorial_recursive(n):
    # base case
    if n == 0:
        return 1
    # recursive step
    return n * factorial_recursive(n - 1)

# test runs
print(factorial_recursive(0))   # 1
print(factorial_recursive(5))   # 120
print(factorial_recursive(7))   # 5040



# Challenge 2: check palindrome with recursion
def palindrome_recursive(word):
    # empty or one letter words are palindromes
    if len(word) <= 1:
        return True

    # if first and last don't match, stop
    if word[0] != word[-1]:
        return False

    # otherwise check the middle part
    return palindrome_recursive(word[1:-1])


# another version, ignores spaces and case
def palindrome_recursive_clean(word):
    s = word.lower().replace(" ", "")
    if len(s) <= 1:
        return True
    if s[0] != s[-1]:
        return False
    return palindrome_recursive_clean(s[1:-1])


# quick checks
print(palindrome_recursive("noon"))     # True
print(palindrome_recursive("hello"))    # False
print(palindrome_recursive("madam"))    # True
print(palindrome_recursive("a"))        # True
print(palindrome_recursive(""))         # True
print(palindrome_recursive("level"))    # True
print(palindrome_recursive("python"))   # False



# Iterative versions (for comparison)
def factorial_iter(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


def palindrome_iter(word):
    s = word.lower().replace(" ", "")
    left, right = 0, len(s) - 1

    while left < right:
        if s[left] != s[right]:
            return False
        left += 1
        right -= 1
    return True


# compare recursion vs iteration
print("\n-- Comparison --")
print("Recursive factorial(5):", factorial_recursive(5))
print("Iterative factorial(5):", factorial_iter(5))
print("Recursive palindrome('noon'):", palindrome_recursive("noon"))
print("Iterative palindrome('noon'):", palindrome_iter("noon"))

use another palindrome instead of race car