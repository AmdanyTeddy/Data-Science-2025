# -*- coding: utf-8 -*-
"""assignment_11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbtfOcI_Zh3VhcFmRMXtVxjQ_byv8x8B
"""

def cut_and_sort(nums, k):
    """
    nums: list of integers
    k: number of elements to chop off from the front

    Removes the first k elements from nums,
    then sorts what is left (ascending).
    If k is bigger than the list length, the list just becomes empty.
    """
    # drop the first k items
    del nums[:k]
    # sort what’s left
    nums.sort()

# quick tests
def try_cut_and_sort():
    print("Trying out cut_and_sort():")
    print("-" * 30)

    L1 = [1, 6, 3]
    cut_and_sort(L1, 1)
    print("Case 1:", L1, " (expected [3, 6])")

    L2 = [5, 2, 8, 1, 9, 4]
    cut_and_sort(L2, 3)
    print("Case 2:", L2, " (expected [1, 4, 9])")

    L3 = [10, 20, 30]
    cut_and_sort(L3, 3)
    print("Case 3:", L3, " (expected [])")

    L4 = [7, 3, 5]
    cut_and_sort(L4, 5)
    print("Case 4:", L4, " (expected [])")

    L5 = [9, 1, 4, 2]
    cut_and_sort(L5, 0)
    print("Case 5:", L5, " (expected [1, 2, 4, 9])")

    L6 = []
    cut_and_sort(L6, 2)
    print("Case 6:", L6, " (expected [])")

    L7 = [-3, 5, -1, 2, -4]
    cut_and_sort(L7, 2)
    print("Case 7:", L7, " (expected [-4, -1, 2])")

# version that prints steps so you can see what’s happening
def cut_and_sort_verbose(nums, k):
    print(f"Start: {nums}")
    print(f"Chop off first {k} elements")

    if k >= len(nums):
        nums.clear()
        print("Removed everything (k was too big)")
    else:
        del nums[:k]
        print("After cutting:", nums)

    nums.sort()
    print("After sorting:", nums)
    print()

# run tests if script is executed
if __name__ == "__main__":
    try_cut_and_sort()

    print("=" * 40)
    print("Step-by-step runs")
    print("=" * 40)

    ex1 = [1, 6, 3]
    cut_and_sort_verbose(ex1, 1)

    ex2 = [5, 2, 8, 1, 9]
    cut_and_sort_verbose(ex2, 3)

    ex3 = [10, 20, 30]
    cut_and_sort_verbose(ex3, 5)

