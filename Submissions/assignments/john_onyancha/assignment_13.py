# -*- coding: utf-8 -*-
"""assignment_13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbtfOcI_Zh3VhcFmRMXtVxjQ_byv8x8B
"""

# Q1. safe_average function
def safe_average(values):
    """
    Takes a list that might have numbers and junk mixed in.
    - Only uses the numbers
    - If no numbers are found, raise ValueError
    """
    nums = []

    for v in values:
        try:
            nums.append(float(v))   # try turning it into a float
        except (ValueError, TypeError):
            pass   # skip anything that’s not a number

    if not nums:
        raise ValueError("No numeric elements found!")

    return sum(nums) / len(nums)


# --- Tests for safe_average ---
print("Q1 Tests")
try:
    print(safe_average([10, 20, "thirty", 40]))  # ~23.33
except ValueError as e:
    print("Error:", e)

try:
    print(safe_average(["a", "b"]))              # should raise
except ValueError as e:
    print("Error:", e)
print()


# Q2. validate_transaction function
def validate_transaction(amounts):
    """
    amounts: list of positive numbers (not empty)
    - use assertions to check:
        * list not empty
        * all positive
    - return total
    """
    assert len(amounts) > 0, "Empty transaction list"
    for amt in amounts:
        assert amt > 0, "Transaction must be positive"

    return sum(amounts)


# --- Tests for validate_transaction ---
print("Q2 Tests")
try:
    print(validate_transaction([100, 250.5, 89]))   # 439.5
except AssertionError as e:
    print("Error:", e)

try:
    print(validate_transaction([]))                 # should raise
except AssertionError as e:
    print("Error:", e)

try:
    print(validate_transaction([100, -50]))         # should raise
except AssertionError as e:
    print("Error:", e)
print()


# Q3. student_score_summary
def student_score_summary(scores, threshold):
    """
    scores: dict of {name: score}
    threshold: cutoff number
    Returns list of students scoring above threshold (alphabetical).
    """
    passed = [name for name, score in scores.items() if score > threshold]
    passed.sort()
    return passed


# --- Tests for student_score_summary ---
print("Q3 Tests")
students = {"Alice": 85, "Bob": 92, "Charlie": 78, "Daisy": 95}
print(student_score_summary(students, 80))   # ['Alice', 'Bob', 'Daisy']
print(student_score_summary(students, 100))  # []
print()


# Q4. merge_inventory
def merge_inventory(inv1, inv2):
    """
    inv1 + inv2 → return combined inventory
    If item appears in both, add quantities
    """
    merged = inv1.copy()
    for item, qty in inv2.items():
        merged[item] = merged.get(item, 0) + qty
    return merged


# shorter alternative
def merge_inventory_alt(inv1, inv2):
    items = set(inv1.keys()) | set(inv2.keys())
    return {i: inv1.get(i, 0) + inv2.get(i, 0) for i in items}


# --- Tests for merge_inventory ---
print("Q4 Tests")
inv1 = {"pen": 10, "notebook": 5}
inv2 = {"notebook": 3, "eraser": 7}
print(merge_inventory(inv1, inv2))     # {'pen': 10, 'notebook': 8, 'eraser': 7}

