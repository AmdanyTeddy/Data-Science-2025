# -*- coding: utf-8 -*-
"""assignment_19_20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbtfOcI_Zh3VhcFmRMXtVxjQ_byv8x8B
"""

# Assignment a) HealthProfile (SRP)

class HealthProfile:
    def __init__(self, name, age, weight, height, gender, activity_level):
        self.name = name
        self.age = age
        self.weight = weight
        self.height = height
        self.gender = gender.lower()
        self.activity_level = activity_level.lower()

    def get_bmi(self):
        h_m = self.height / 100
        return round(self.weight / (h_m ** 2), 2)

    def get_bmr(self):
        if self.gender == "male":
            return round(10 * self.weight + 6.25 * self.height - 5 * self.age + 5)
        else:
            return round(10 * self.weight + 6.25 * self.height - 5 * self.age - 161)

    def daily_calories(self):
        factors = {
            "sedentary": 1.2,
            "light": 1.375,
            "moderate": 1.55,
            "active": 1.725,
            "very active": 1.9
        }
        return round(self.get_bmr() * factors.get(self.activity_level, 1.2))

    def __str__(self):
        return f"{self.name} ({self.age} yrs, {self.gender})"


# test
profile = HealthProfile("Alice", 30, 65, 170, "female", "moderate")
print("\nHealth Profile:")
print(profile)
print("BMI:", profile.get_bmi())
print("BMR:", profile.get_bmr())
print("Daily calories:", profile.daily_calories())


# Assignment b) CalorieCalculator (OCP)

from abc import ABC, abstractmethod

class CalorieCalculator(ABC):
    @abstractmethod
    def calculate(self, minutes):
        pass

class Walking(CalorieCalculator):
    def calculate(self, minutes):
        return round(minutes * 4.5)

class Running(CalorieCalculator):
    def calculate(self, minutes):
        return round(minutes * 10)

class Swimming(CalorieCalculator):
    def calculate(self, minutes):
        return round(minutes * 7)

class Cycling(CalorieCalculator):
    def calculate(self, minutes):
        return round(minutes * 8)

class ActivityPlanner:
    def __init__(self):
        self.activities = {
            "walking": Walking(),
            "running": Running(),
            "swimming": Swimming(),
            "cycling": Cycling()
        }

    def total_calories(self, plan):
        total = 0
        for act, mins in plan.items():
            if act in self.activities:
                total += self.activities[act].calculate(mins)
        return total


# test
planner = ActivityPlanner()
workout = {"walking": 30, "running": 20}
print("\nActivity Planner:")
print("Total calories:", planner.total_calories(workout))


# Assignment c) Workout Devices (LSP & ISP)

class WorkoutDevice(ABC):
    @abstractmethod
    def start_tracking(self):
        pass
    @abstractmethod
    def stop_tracking(self):
        pass
    @abstractmethod
    def get_data(self):
        pass

class SmartWatch(WorkoutDevice):
    def start_tracking(self):
        print("SmartWatch tracking started")
    def stop_tracking(self):
        print("SmartWatch tracking stopped")
        return {"steps": 5000, "distance": 4.2, "hr": 120}
    def get_data(self):
        return self.stop_tracking()

class SmartShoe(WorkoutDevice):
    def start_tracking(self):
        print("SmartShoe tracking started")
    def stop_tracking(self):
        print("SmartShoe tracking stopped")
        return {"steps": 8000, "distance": 6.5}
    def get_data(self):
        return self.stop_tracking()

class HeartRateBand(WorkoutDevice):
    def start_tracking(self):
        print("HeartRateBand tracking started")
    def stop_tracking(self):
        print("HeartRateBand tracking stopped")
        return {"hr": 135, "calories": 420}
    def get_data(self):
        return self.stop_tracking()


def test_devices():
    devices = [SmartWatch(), SmartShoe(), HeartRateBand()]
    for d in devices:
        print("\nTesting", d.__class__.__name__)
        d.start_tracking()
        print("Data:", d.get_data())

test_devices()


# Assignment d) Fitness Tracker (DIP)

import datetime, json

class Workout(ABC):
    @abstractmethod
    def __init__(self, start, end, calories=None):
        self.start = start
        self.end = end
        self.calories = calories
    def duration(self):
        return self.end - self.start
    @abstractmethod
    def get_calories(self):
        pass

class RunningWorkout(Workout):
    def __init__(self, start, end, distance=None, calories=None):
        super().__init__(start, end, calories)
        self.distance = distance
        self.kind = "Running"
    def get_calories(self):
        return self.calories if self.calories else (self.distance or 0) * 60

class BikeWorkout(Workout):
    def __init__(self, start, end, distance=None, calories=None):
        super().__init__(start, end, calories)
        self.distance = distance
        self.kind = "Cycling"
    def get_calories(self):
        if self.calories: return self.calories
        return self.duration().total_seconds() / 3600 * 300

class WorkoutPlanner:
    def __init__(self, types):
        self.types = types
    def create(self):
        print("\nChoose workout type:")
        for i, k in enumerate(self.types.keys(), 1):
            print(f"{i}. {k}")
        choice = int(input("Enter choice: ")) - 1
        key = list(self.types.keys())[choice]
        cls = self.types[key]
        start = datetime.datetime.now()
        end = start + datetime.timedelta(minutes=30)
        dist = input("Distance (km, optional): ")
        return cls(start, end, float(dist) if dist else None)

def save_to_json(workouts, file):
    data = []
    for w in workouts:
        data.append({
            "kind": w.kind,
            "start": w.start.isoformat(),
            "end": w.end.isoformat(),
            "duration_mins": w.duration().total_seconds()/60,
            "calories": w.get_calories()
        })
    with open(file, "w") as f:
        json.dump(data, f, indent=2)


if __name__ == "__main__":
    types = {"Running": RunningWorkout, "Cycling": BikeWorkout}
    planner = WorkoutPlanner(types)
    workouts = []
    while True:
        w = planner.create()
        workouts.append(w)
        print("\nWorkout:", w.kind)
        print("Duration:", w.duration())
        print("Calories:", w.get_calories())
        cont = input("Another workout? (y/n): ")
        if cont.lower() != "y":
            break
    save_to_json(workouts, "workouts.json")
    print("Workouts saved")

