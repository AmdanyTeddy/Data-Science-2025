# -*- coding: utf-8 -*-
"""assignment_17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbtfOcI_Zh3VhcFmRMXtVxjQ_byv8x8B
"""

# Assignment 	17
# Topic: Object-Oriented Programming
# Subtopics: Data Abstraction, Class Definition, Class Instances, Methods
# Challenge 1: ðŸ“¦ The Box Class
# Goal: Practice class creation, comparison between objects, and area/volume calculations.

# Challenge 1
# Write a class called Box that:
# â€¢	Has attributes: length, width, height
# â€¢	Has a method get_volume() that returns the volume (length Ã— width Ã— height)
# â€¢	Has a method is_cube() that returns True if all sides are equal
# â€¢	Has a method bigger(other) that returns the box with a larger volume



# ðŸ§ª

#  Challenge 2: ðŸŽµ The Song Class
# Goal: Practice instance attributes, conditionals, methods, and object interaction.

# Challenge 2
# Write a class called Song that:
# â€¢	Has attributes: title, artist, duration (in seconds)
# â€¢	Has a method is_long() that returns True if the song is over 5 minutes (300 seconds)
# â€¢	Has a method same_artist(other) that returns True if two songs have the same artist
# â€¢	Has a method longer_song(other) that returns the song with the longer duration


# Challenge 1: Box class
class Box:
    def __init__(self, length, width, height):
        # store the dimensions
        self.length = length
        self.width = width
        self.height = height

    def volume(self):
        # calculate volume (L Ã— W Ã— H)
        return self.length * self.width * self.height

    def is_cube(self):
        # check if all sides are the same
        return self.length == self.width == self.height

    def bigger(self, other):
        # compare volumes and return the larger box
        if self.volume() >= other.volume():
            return self
        return other

    def __str__(self):
        return f"Box({self.length}, {self.width}, {self.height})"


# Quick tests
print("=== Box tests ===")
b1 = Box(2, 3, 4)
b2 = Box(5, 5, 5)   # cube
b3 = Box(1, 10, 2)

print(b1, "volume:", b1.volume())
print(b2, "volume:", b2.volume(), "is cube?", b2.is_cube())
print("Bigger between", b1, "and", b3, ":", b1.bigger(b3))
print()


# Challenge 2: Song class
class Song:
    def __init__(self, title, artist, seconds):
        self.title = title
        self.artist = artist
        self.seconds = seconds

    def is_long(self):
        # song is "long" if more than 5 minutes
        return self.seconds > 300

    def same_artist(self, other):
        # compare ignoring case
        return self.artist.lower() == other.artist.lower()

    def longer(self, other):
        # return whichever is longer
        return self if self.seconds >= other.seconds else other

    def __str__(self):
        mins = self.seconds // 60
        secs = self.seconds % 60
        return f"{self.title} - {self.artist} [{mins}:{secs:02d}]"


# Quick tests
print("=== Song tests ===")
s1 = Song("Stairway to Heaven", "Led Zeppelin", 482)
s2 = Song("Smells Like Teen Spirit", "Nirvana", 301)
s3 = Song("Lithium", "Nirvana", 257)

print(s1)
print(s2)
print("Is long?", s1.is_long(), "|", s2.is_long())
print("Same artist?", s2.same_artist(s3))
print("Longer between:", s2.longer(s3))

