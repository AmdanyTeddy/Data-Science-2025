# -*- coding: utf-8 -*-
"""Assignment 8.lamech

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i0971XO4nXZikMDGfelHDUYXlSbmpcsp
"""

#Challenge 1:
#Check if a number is a multiple of 3

is_multiple_of_3 = lambda x: x % 3 == 0

print(is_multiple_of_3(7))

#Challenge 2; Problem A:
#Finding the avarage of a list of numbers
def average(L):

    if len(L) == 0:
        return 0
    return sum(L) / len(L)

L = (1, 2, 3, 4, 5)
print(average(L))

#Challenge 2; Problem B:
#Finding the total number of letters in list a list of string

def total_letters(words):
    total = 0
    for word in words:
        total += len(word)
    return total
print(total_letters(["apple", "banana", "cherry"]))

#Challenge 3
#Use filter() and a lambda to return all numbers divisible by 3 in a list.
def divisible_by_three(numbers):
    return list(filter(lambda x: x % 3 == 0, numbers))

numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
result = divisible_by_three(numbers)
print(result)

#Challenge 4
#Implementing a function dot_product

def dot_product(tA, tB):
    """
    tA: a tuple of numbers
    tB: a tuple of numbers of the same length as tA
    Returns a tuple (length, dot product of tA and tB)
    """
    total = 0
    for i in range(len(tA)):
        total += tA[i] * tB[i]
    return (len(tA), total)

# Example:
print(dot_product((1, 2, 3), (4, 5, 6)))  # âžœ (3, 32)