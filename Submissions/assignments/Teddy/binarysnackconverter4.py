# -*- coding: utf-8 -*-
"""BinarySnackConverter4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18P01EAIhquZM8kPnr5wIB_TFuhCT75Mu
"""

# Challenge: Binary Snack Machine (15–20 min, Individual or Pairs)
# Scenario:
# Imagine you're building a digital snack machine that only understands numbers in binary. To buy your favorite snack, you must input the price in binary — including the fractional part!
# Task:
# Write a Python program that asks the user for a price (a float between 0 and 10), then prints its binary representation, using guess-and-check logic for the fractional part.

# Requirements
# •	Handle both integer and fractional parts.
# •	Round the fractional binary to maximum 8 bits.
# •	If the user enters 2.75, output should be: 10.11
# •	If the user enters 0.625, output should be: 0.101
# •	Add emoji or messages for fun if you like!
# Very simple binary converter without built-in helpers

print("Welcome to the Binary Snack Machine!")
price = float(input("Enter snack price (between 0 and 10): "))

if price < 0 or price > 10:
    print("Invalid input! Price must be between 0 and 10.")
else:
# Separate integer and fractional parts
    integer_part = int(price)
    fraction_part = price - integer_part

# Convert integer to binary
    int_binary = ""
    if integer_part == 0:
        int_binary = "0"
    else:
        while integer_part > 0:
            remainder = integer_part % 2
            int_binary = str(remainder) + int_binary
            integer_part = integer_part // 2

# Convert fractional pat to binary
    frac_binary = ""
    count = 0
    while fraction_part > 0 and count < 8:
        fraction_part = fraction_part * 2
        bit = int(fraction_part)
        frac_binary += str(bit)
        fraction_part = fraction_part - bit
        count += 1
    if frac_binary != "":
        print("Binary price: " + int_binary + "." + frac_binary)
    else:
        print("Binary price: " + int_binary)

    print("Enjoy your snack!")