# -*- coding: utf-8 -*-
"""TeddyAss13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yOb2eYbaXmBSH2CHrZt82yp2aode4lMx
"""

def safe_average(L):
    """
    L is a list of numbers (ints or floats). It may be empty or contain non-numeric values.
    Returns the average of all valid numeric elements in the list.
    Ignores non-numeric items using exception handling.
    If there are no numeric elements, raises a ValueError.
    """
    total = 0
    count = 0
    for item in L:
        try:
            num = float(item)
            total += num
            count += 1
        except (ValueError, TypeError):
            continue

    if count == 0:
        raise ValueError("No numeric elements found.")

    return total / count

# Example tests
print(safe_average([10, 20, "thirty", 40]))
# print(safe_average(["a", "b"]))

def validate_transaction(amounts):
    """
    amounts is a non-empty list of positive integers or floats representing transaction values.
    Uses assertions to ensure:
    - the list is not empty
    - all amounts are positive
    Returns the total amount.
    Raises AssertionError with a message if validations fail.
    """
    assert len(amounts) > 0, "Transaction list is empty"
    for amount in amounts:
        assert amount > 0, "Transaction amount must be positive"

    return sum(amounts)

# Example tests
print(validate_transaction([100, 250.5, 89]))
# print(validate_transaction([]))
# print(validate_transaction([100, -50]))

def student_score_summary(scores, threshold):
    """
    scores: a dictionary mapping student names (str) to total scores (int).
    threshold: an integer score threshold.
    Returns a list of student names who scored above the threshold.
    The list should be sorted alphabetically.
    """
    result = [name for name, score in scores.items() if score > threshold]
    return sorted(result)

# Example tests
students = {"Alice": 85, "Bob": 92, "Charlie": 78, "Daisy": 95}
print(student_score_summary(students, 80))
print(student_score_summary(students, 100))

def merge_inventory(inv1, inv2):
    """
    inv1 and inv2 are dictionaries mapping item names (str) to quantities (int).
    Returns a new dictionary that combines both inventories.
    If an item appears in both, their quantities are summed.
    """
    merged = inv1.copy()
    for item, quantity in inv2.items():
        if item in merged:
            merged[item] += quantity
        else:
            merged[item] = quantity
    return merged

# Example tests
inv1 = {"pen": 10, "notebook": 5}
inv2 = {"notebook": 3, "eraser": 7}
print(merge_inventory(inv1, inv2))