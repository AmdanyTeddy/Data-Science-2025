# -*- coding: utf-8 -*-
"""Hackathon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fq1yfUzNP2WGxCePyr-n9f-281UkrC59
"""

# Function to count the number of vowels in a given sentence
def count_vowels(sentence):
    vowels = {'a', 'e', 'i', 'o', 'u'}  # Set of vowels
    count = 0  # Initialize counter

    # Convert the sentence to lowercase and check each character
    for char in sentence.lower():
        if char in vowels:
            count += 1  # Increment count if character is a vowel

    return count  # Return the total count

# Prompt the user to enter a sentence
user_input = input("Enter a sentence: ")

# Call the function with user input and store the result
vowel_count = count_vowels(user_input)

# Display the result
print(f"Number of vowels: {vowel_count}")

# Function to check if a number is prime
def is_prime(num):
    if num < 2:
        return False  # 0 and 1 are not prime numbers
    for i in range(2, int(num**0.5) + 1):  # Check up to square root of num
        if num % i == 0:
            return False  # Not a prime if divisible by any number in range
    return True  # Prime if no divisors found

# Get input from the user
start = int(input("Enter the start number: "))
end = int(input("Enter the end number: "))

# Print all prime numbers between start and end (inclusive)
print(f"Prime numbers between {start} and {end}:")
for number in range(start, end + 1):
    if is_prime(number):
        print(number)

# Hardcoded secret number between 1 and 50
secret_number = 37

# Maximum number of attempts allowed
max_attempts = 5

print("Guess the secret number between 1 and 50. You have 5 attempts.")

# Loop to give the user up to 5 chances to guess
for attempt in range(1, max_attempts + 1):
    # Prompt the user to enter a guess
    guess = int(input(f"Attempt {attempt}: Enter your guess: "))

    # Check if the guess is too low
    if guess < secret_number:
        print("Too low.")
    # Check if the guess is too high
    elif guess > secret_number:
        print("Too high.")
    # If the guess is correct
    else:
        print(f"Congratulations! You guessed the secret number {secret_number} in {attempt} attempt(s)!")
        break  # Exit the loop if guessed correctly
else:
    # This block runs if the user fails all attempts
    print(f"Sorry! The secret number was {secret_number}. Better luck next time!")

# Define the dimensions of the table
n = 4  # number of rows
m = 5  # number of columns

# Print the header row
print("    ", end="")  # initial spacing for alignment
for col in range(1, m + 1):
    print(f"{col:>4}", end="")  # print column headers right-aligned
print()  # new line

# Print a separator
print("    " + "----" * m)

# Print the multiplication table rows
for row in range(1, n + 1):
    print(f"{row:>2} |", end="")  # row label with separator
    for col in range(1, m + 1):
        print(f"{row * col:>4}", end="")  # print each cell right-aligned
    print()  # new line after each row

