# -*- coding: utf-8 -*-
"""Assignment  9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17OI0dRF51hNMk9csJnnkVxhRpQtcSQ7v
"""

ELDOHUB
# Assignment on Topic 7 and 8 - Functions
# Challenge 1: Lambda Magic – Multiples of 3
# Problem:
# Write a lambda function that checks if a number is a multiple of 3.(10 Marks)
# Lambda function to check multiple of 3

# User input
num = int(input("Enter a number("))
#Lmbuda Magic formula
is_multp_of_3 = lambda x: x % 3 == 0
if is_multp_of_3(num):
#Print
    print("Multiple of 3")
else:
    print("Not a multiple of 3")



Enter a number(27
Multiple of 3

# Challenge 2: Using sum() and len() with Lists
# Problem A: Find the average of a list of numbers (10 marks)
# Function Signature:
def average(L):
    tl = sum(L)
    co = len(L)
    r = tl / co
    return r

my_list = [4, 8, 10, 6]
print("Average is:", average(my_list))


Average is: 7.0

#Problem B: Find the total number of letters in a list of strings(10 Marks)
#Function Signature:
def total_(words):
    total = 0
    for word in words:
        total += len(word)
    return total
my_list = ["Ngwashe", "Uji", "Matoke"]
print("Total letters:", total_(my_list))

Total letters: 16

# Challenge 3: Combine Lambda + List(10 Marks)
# Problem:
# Use filter() and a lambda to return all numbers divisible by 3 in a list.
#My numbers
numbers = [3, 4, 6, 8, 9]

# Filter with lambda to GET numbers div3
div3 = filter(lambda number: number % 3 == 0, numbers)

# Convert & print it
print("Numbers divisible by 3:", list(div3))



Numbers divisible by 3: [3, 6, 9]

# Challenge 4 (10 Marks)
# Task:
# Implement a function dot_product that does the following:
# NB:Copy the whole code and run the problem first(Task on””” tA & tB”””)

# def dot_product(tA, tB):
#     """
#     tA: a tuple of numbers
#     tB: a tuple of numbers of the same length as tA
#     Returns a tuple (length, dot product of tA and tB)
#     """
#     total = 0
#     for i in range(len(tA)):
#         total += tA[i] * tB[i]
def dot_prod(tA, tB):
    total = 0
    for i in range(len(tA)):
        total = total + (tA[i] * tB[i])
    return (len(tA), total)
a = (1, 2, 3)
b = (4, 5, 6)

answer = dot_prod(a, b)

print("Length of tuples:", answer[0])
print("Dot prod:", answer[1])


Length of tuples: 3
Dot prod: 32