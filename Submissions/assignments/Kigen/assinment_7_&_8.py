# -*- coding: utf-8 -*-
"""Assinment 7 & 8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_LzZJgEwznry_SVCLB5LqWMOiGVggr5
"""

#Write a lambda function that checks if a number is a multiple of 3
is_multiple_of_3 = lambda x: x % 3 == 0
print(is_multiple_of_3(9))   # True
print(is_multiple_of_3(10))  # False


True
False

#Find the average of a list of numbers
def average(L):
    if len(L) == 0:
        return 0  # avoid division by zero
    return sum(L) / len(L)
numbers = [12, 21, 33, 44, 57]
print(average(numbers))  # Output: 30.0



33.4

# Find the total number of letters in a list of string
def total_letters(words):
    return sum(len(word) for word in words)
words_in_list = ["orange", "banana", "pinaple"]
print(total_letters(words_in_list))


19

#Use filter() and a lambda to return all numbers divisible by 3 in a list
def divisible_by_3(numbers):
    return list(filter(lambda x: x % 3 == 0, numbers))
nums = [1, 3, 4, 6, 9, 10, 12, 15, 17]
result = divisible_by_3(nums)
print(result)  # Output: [3, 6, 9, 12, 15]


[3, 6, 9, 12, 15]

def dot_product(tA, tB):
    """
    tA: a tuple of numbers
    tB: a tuple of numbers of the same length as tA
    Returns a tuple (length, dot product of tA and tB)
    """
    total = 0
    for i in range(len(tA)):
        total += tA[i] * tB[i]
    return (len(tA), total)

# Example:
print(dot_product((1, 2, 3), (4, 5, 6)))  # âžœ (3, 32)
print(dot_product((3, 4, 9,6), (7, 8, 4,7)))

(3, 32)
(4, 131)