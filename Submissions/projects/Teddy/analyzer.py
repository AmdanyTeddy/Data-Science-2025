# -*- coding: utf-8 -*-
"""Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WQyqQIlXhcqfD_g6oasVOhIk87lXuR6g
"""

import string

def analyze_string(text, substring):

# Initialize counters
    total_chars  =  len(text)
    vowels  =  "aeiouAEIOU"
    consonants  =  "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"
    digits  =  "0123456789"
    punctuation  =  "`~!@#$%^&*()_-+={[}]|\:;'<,>.?/"
    vowel_count  =  0
    consonant_count  =  0
    digit_count  =  0
    punctuation_count  =  0
    words  =  set()
    first_occurrence  =  -1
    last_occurrence  =  -1

# Iterate through the string
    for i, char in enumerate(text):
        if char in vowels:
            vowel_count  +=  1
        elif char in consonants:
            consonant_count  +=  1
        elif char in digits:
            digit_count  +=  1
        elif char in punctuation:
            punctuation_count  +=  1

# Collect words
        if char.isalpha() or char  ==  ' ':
            words.add(char.lower())

# Check for substring occurrences
        if text[ i: i+len(substring)]  ==  substring:
            if first_occurrence  ==  -1:
                first_occurrence  =  i
            last_occurrence  =  i

# Prepare results
    unique_words  =  sorted(words)
    substring_found  =  first_occurrence  !=  -1

# Display results
    print(f"Total characters: {total_chars}")
    print(f"Vowels: {vowel_count}")
    print(f"Consonants: {consonant_count}")
    print(f"Digits: {digit_count}")
    print(f"Punctuation: {punctuation_count}")
    print(f"Unique words (sorted alphabetically): {', '.join(unique_words)}")
    if substring_found:
        print(f"First occurrence of '{substring}': Index {first_occurrence}")
        print(f"Last occurrence of '{substring}': Index {last_occurrence}")
    else:
        print(f"Substring '{substring}' not found.")

# Define a function analyze numbers
def analyze_numbers():
# Accept a comma-separated list of integers from the user
    user_input  =  input("Enter a comma-separated list of integers: ")
    numbers  =  [int(num.strip()) for num in user_input.split(',')]

# Initialize variables for sum, min, max, and counters for divisibility
    total_sum  =  0
    count  =   0
    min_num  =  float('inf')
    max_num  =  float('-inf')
    divisible_by_3_or_5  =  []

# Iterate through the list to compute sum, average, min, max, and flag numbers divisible by 3 or 5
    for num in numbers:
        total_sum  +=  num
        count  +=  1
        if num  <  min_num:
            min_num  =  num
        if num  >  max_num:
            max_num = num
        if num % 3  ==  0 or num % 5  ==  0:
            divisible_by_3_or_5.append(num)

# Calculate average
    average  =  total_sum / count


# Display the results
    print(f"Sum: {total_sum}")
    print(f"Average (Mean): {average}")
    print(f"Minimum: {min_num}")
    print(f"Maximum: {max_num}")
    print("Numbers divisible by 3 or 5:", divisible_by_3_or_5)

# Call the function to execute
analyze_numbers()

# Define a function to convert decimal to binary
def decimal_to_binary(n):
# Handle zero case
    if n  ==  0:
        return "0"

# Determine if the number is negative
    is_negative  =  n < 0
    n  =  abs(n)

# Initialize an empty string to store the binary representation
    binary  =  ""

# Convert the absolute value of the number to binary
    while n  >  0:
        binary  =  str(n % 2) + binary
        n  //=  2

# Add the sign for negative numbers
    if is_negative:
        binary  =  "-"  +  binary

    return binary

# Get input from the user
num  =  int(input("Enter a positive or negative integer: "))

# Convert the number to binary and display the result
binary_representation  =  decimal_to_binary(num)
print(f"The binary representation of {num} is: {binary_representation}")

# Creating the menu
import string

def analyze_string(text, substring):
# Initialize counters
    total_chars  =  len(text)
    vowels  =  "aeiouAEIOU"
    consonants  =  "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"
    digits  =  "0123456789"
    punctuation  =  "`~!@#$%^&*()_-+={[}]|\:;'<,>.?/"
    vowel_count  = 0
    consonant_count  =  0
    digit_count  =  0
    punctuation_count  =  0
    words  =  set()
    first_occurrence  =  -1
    last_occurrence  =  -1

# Iterate through the string
    for i, char in enumerate(text):
        if char in vowels:
            vowel_count  +=  1
        elif char in consonants:
            consonant_count  +=  1
        elif char in digits:
            digit_count  +=  1
        elif char in punctuation:
            punctuation_count  +=  1

# Collect words
        if char.isalpha() or char  ==  ' ':
            words.add(char.lower())

# Check for substring occurrences
        if text[i:i+len(substring)]  ==  substring:
            if first_occurrence  ==  -1:
                first_occurrence  =  i
            last_occurrence  =  i

# Prepare results
    unique_words  =  sorted(words)
    substring_found  =  first_occurrence  !=  -1

# Display results
    print(f"Total characters: {total_chars}")
    print(f"Vowels: {vowel_count}")
    print(f"Consonants: {consonant_count}")
    print(f"Digits: {digit_count}")
    print(f"Punctuation: {punctuation_count}")
    print(f"Unique words (sorted alphabetically): {', '.join(unique_words)}")
    if substring_found:
        print(f"First occurrence of '{substring}': Index {first_occurrence}")
        print(f"Last occurrence of '{substring}': Index {last_occurrence}")
    else:
        print(f"Substring '{substring}' not found.")

def analyze_numbers():
# Accept a comma-separated list of integers from the user
    user_input  =  input("Enter a list of numbers separated by comma: ")
    numbers  =  [int(num.strip()) for num in user_input.split(',')]

# Initialize variables for sum, min, max, and counters for divisibility
    total_sum  =  0
    count  =  0
    min_num  =  float('inf')
    max_num  =  float('-inf')
    divisible_by_3_or_5  =  []

# Iterate through the list to compute sum, average, min, max, and flag numbers divisible by 3 or 5
    for num in numbers:
        total_sum  +=  num
        count  +=  1
        if num  <  min_num:
            min_num  =  num
        if num  >  max_num:
            max_num  =  num
        if num % 3  ==  0 or num % 5  ==  0:
            divisible_by_3_or_5.append(num)

# Calculate average
    Average  =  total_sum / count

# Display the results
    print(f"Sum: {total_sum}")
    print(f"Average (Mean): {Average}")
    print(f"Minimum: {min_num}")
    print(f"Maximum: {max_num}")
    print("Numbers divisible by 3 or 5:", divisible_by_3_or_5)

def decimal_to_binary(n):
# Handle zero case
    if n  ==  0:
        return "0"

# Determine if the number is negative
    is_negative  =  n  <  0
    n  =  abs(n)

# Initialize an empty string to store the binary representation
    binary  =  ""

# Convert the absolute value of the number to binary
    while n  >  0:
        binary  =  str(n % 2)  +  binary
        n  //=  2

# Add the sign for negative numbers
    if is_negative:
        binary   =  "-"   + binary

    return binary

def main():
    while True:
        print("\nMenu:")
        print("1. String Analysis")
        print("2. Numeric Statistics")
        print("3. Binary Converter")
        print("4. Exit")

        choice  =  input("Enter your choice (1-4): ")

        if choice  ==  '1':
            text  =  input("Enter a string: ")
            substring  =  input("Enter a substring to find: ")
            analyze_string(text, substring)
        elif choice  ==  '2':
            analyze_numbers()
        elif choice  ==  '3':
            num  =  int(input("Enter a positive or negative integer: "))
            binary_representation  =  decimal_to_binary(num)
            print(f"The binary representation of {num} is: {binary_representation}")
        elif choice  ==  '4':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()